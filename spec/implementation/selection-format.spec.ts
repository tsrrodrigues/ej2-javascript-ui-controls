import { SelectionCharacterFormat, SelectionParagraphFormat, SelectionSectionFormat, SelectionTableFormat, SelectionCellFormat, SelectionRowFormat } from '../../src/index';
import { WParagraphFormat, WSectionFormat, WRowFormat, WCellFormat, WCharacterFormat } from '../../src/document-editor/implementation/format/index';
import { WidthType, HeightType, Strikethrough, CellVerticalAlignment, Underline, BaselineAlignment } from '../../src/document-editor/base/types';
import { DocumentEditor } from '../../src/document-editor/document-editor';
import { createElement } from '@syncfusion/ej2-base';
import { LayoutViewer, PageLayoutViewer } from '../../src/index';
import { TestHelper } from '../test-helper.spec';
import { Editor } from '../../src/index';
import { Selection } from '../../src/index';

describe('Selection Format validation -1', () => {
    it('Selection table format validation', () => {
console.log('Selection table format validation');
        let tableFormat: SelectionTableFormat = new SelectionTableFormat(undefined);
        expect(tableFormat.background).toBe(undefined);
        expect(tableFormat.tableAlignment).toBe(undefined);
        expect(tableFormat.leftIndent).toBe(0);
        expect(tableFormat.rightMargin).toBe(0);
        expect(tableFormat.leftMargin).toBe(0);
        expect(tableFormat.bottomMargin).toBe(0);
        expect(tableFormat.topMargin).toBe(0);
        tableFormat.bottomMargin = 7.2;
        tableFormat.preferredWidth = 12;
        expect(tableFormat.preferredWidth).toBe(12);
        tableFormat.preferredWidth = 12;
        tableFormat.topMargin = 7.2;
        tableFormat.preferredWidthType = 'Percent';
        expect(tableFormat.preferredWidthType).toBe('Percent');
        expect(tableFormat.table).toBe(undefined);
        expect(tableFormat.cellSpacing).toBe(0);
        tableFormat.preferredWidthType = 'Auto';
        tableFormat.preferredWidthType = 'Auto';
        tableFormat.destroy();
    });
    it('selection cell format validation', () => {
console.log('selection cell format validation');
        let cellFormat: SelectionCellFormat = new SelectionCellFormat(undefined);
        cellFormat.preferredWidth = 14;
        cellFormat.preferredWidth = 14;
        expect(cellFormat.preferredWidth).toBe(14);
        expect(cellFormat.preferredWidthType).toBe(undefined);
        cellFormat.preferredWidthType = 'Auto';
        cellFormat.preferredWidthType = 'Auto';
        expect(() => { cellFormat.clearCellFormat(); }).not.toThrowError();
        cellFormat.leftMargin = 0;
        cellFormat.rightMargin = 0;
        cellFormat.bottomMargin = 0;
        cellFormat.topMargin = 0;
        cellFormat.background = "#000000";
        cellFormat.verticalAlignment = 'Top';
        let format: WCellFormat = new WCellFormat(undefined);
        format.leftMargin = 0;
        format.rightMargin = 0;
        format.bottomMargin = 0;
        format.topMargin = 0;
        format.shading.backgroundColor = "#000000";
        format.verticalAlignment = 'Top';
        expect(() => { cellFormat.combineFormat(format); }).not.toThrowError();
        format.leftMargin = 1;
        format.rightMargin = 2;
        format.bottomMargin = 3;
        format.topMargin = 2;
        format.shading.backgroundColor = "#ffffff";
        format.verticalAlignment = 'Bottom';
        expect(() => { cellFormat.combineFormat(format); }).not.toThrowError();
        cellFormat.clearFormat();
        cellFormat.destroy();
    });
    it('selection row format validation', () => {
console.log('selection row format validation');
        let rowFormat: SelectionRowFormat = new SelectionRowFormat(undefined);
        rowFormat.height = 12;
        rowFormat.allowBreakAcrossPages = true;
        rowFormat.isHeader = false;
        rowFormat.heightType = 'Exactly';
        let format: WRowFormat = new WRowFormat(undefined);
        format.height = 12;
        format.allowBreakAcrossPages = false;
        format.isHeader = true;
        format.heightType = 'Exactly';
        rowFormat.combineFormat(format);
        expect(() => { rowFormat.clearRowFormat(); }).not.toThrowError();
        rowFormat.combineFormat(format);
        rowFormat = new SelectionRowFormat(undefined);
        format.height = 1;
        format.allowBreakAcrossPages = true;
        format.isHeader = false;
        format.heightType = 'AtLeast';
        expect(() => { rowFormat.combineFormat(format); }).not.toThrowError();
        rowFormat.heightType = 'AtLeast';
        format = new WRowFormat(undefined);
        format.height = 1;
        format.allowBreakAcrossPages = false;
        format.isHeader = true;
        format.heightType = 'Exactly';
        rowFormat.combineFormat(format);
        rowFormat.clearFormat();
        rowFormat.destroy();
    });
});
describe('Selection Format validation -2', () => {
    it('Selection Section Format Validation', () => {
console.log('Selection Section Format Validation');
        let sectionFormat: WSectionFormat = new WSectionFormat(undefined);
        sectionFormat.pageHeight = 12;
        sectionFormat.pageWidth = 13;
        sectionFormat.differentFirstPage = true;
        sectionFormat.differentOddAndEvenPages = false;
        sectionFormat.headerDistance = 12;
        sectionFormat.footerDistance = 12;
        sectionFormat.leftMargin = 12;
        sectionFormat.rightMargin = 12;
        sectionFormat.bottomMargin = 12;
        sectionFormat.topMargin = 12;
        let selectionSection: SelectionSectionFormat = new SelectionSectionFormat(undefined);
        selectionSection.headerDistance = 10;
        selectionSection.footerDistance = 10;
        selectionSection.combineFormat(sectionFormat);
        selectionSection.pageHeight = 1;
        selectionSection.pageWidth = 2;
        selectionSection.differentFirstPage = false;
        selectionSection.differentOddAndEvenPages = true;
        selectionSection.headerDistance = 1;
        selectionSection.footerDistance = 1;
        selectionSection.leftMargin = 1;
        selectionSection.rightMargin = 1;
        selectionSection.bottomMargin = 1;
        selectionSection.topMargin = 1;
        expect(() => { selectionSection.combineFormat(sectionFormat); }).not.toThrowError();
        selectionSection.clearFormat();
        selectionSection.destroy();
    });
    it('selection character format validation', () => {
console.log('selection character format validation');
        let charFormat: SelectionCharacterFormat = new SelectionCharacterFormat(undefined);
        charFormat.baselineAlignment = 'Subscript';
        charFormat.underline = 'Double';
        charFormat.strikethrough = 'DoubleStrike';
        charFormat.highlightColor = 'Pink';
        let character: WCharacterFormat = new WCharacterFormat(undefined);
        character.highlightColor = 'Yellow';
        expect(() => { charFormat.combineFormat(character); }).not.toThrowError();
        charFormat.clearFormat();
        charFormat.destroy();
    });
    it('selection Paragraph format validation', () => {
console.log('selection Paragraph format validation');
        let selFormat: SelectionParagraphFormat = new SelectionParagraphFormat(undefined, undefined);
        expect(() => { selFormat.clearFormat() }).not.toThrowError();
        selFormat.rightIndent = 1;
        selFormat.lineSpacingType = 'Exactly';
        let paraFormat: WParagraphFormat = new WParagraphFormat(undefined);
        paraFormat.rightIndent = 14;
        paraFormat.lineSpacingType = 'AtLeast';
        paraFormat.listFormat.destroy();
        expect(() => { selFormat.combineFormat(paraFormat) }).not.toThrowError();
        selFormat.destroy();
    });
});
describe('Selection Format validation, Paragraph Format validation- 4', () => {
    it('Copy to Format method validation with undefined parameter', () => {
console.log('Copy to Format method validation with undefined parameter');
        let selFormat: SelectionParagraphFormat = new SelectionParagraphFormat(undefined, undefined);
        let format = selFormat.copyToFormat(undefined);
        expect(format).toBe(undefined);
    });

    it('Copy to Format method validation with paragraph format value as undefined', () => {
console.log('Copy to Format method validation with paragraph format value as undefined');
        let selFormat: SelectionParagraphFormat = new SelectionParagraphFormat(undefined, undefined);
        let paraFormat: WParagraphFormat = new WParagraphFormat();
        selFormat.leftIndent = undefined;
        selFormat.afterSpacing = undefined;
        selFormat.beforeSpacing = undefined;
        selFormat.rightIndent = undefined;
        selFormat.textAlignment = undefined;
        selFormat.lineSpacing = undefined;
        selFormat.lineSpacingType = undefined;
        selFormat.firstLineIndent = undefined;
        selFormat.copyToFormat(paraFormat);
        expect(paraFormat.leftIndent).toBe(0);
    });
});
// describe('Nested table format retrievel', () => {
//     let editor: DocumentEditor = undefined;
//     beforeAll(() => {
//         let ele: HTMLElement = createElement('div', { id: 'container' });
//         document.body.appendChild(ele);
//         DocumentEditor.Inject(Editor, Selection);
//         editor = new DocumentEditor({ enableEditor: true,enableSelection: true, isReadOnly: false });
//         (editor.documentHelper as any).containerCanvasIn = TestHelper.containerCanvas;
//         (editor.documentHelper as any).selectionCanvasIn = TestHelper.selectionCanvas;
//         (editor.documentHelper.render as any).pageCanvasIn = TestHelper.pageCanvas;
//         (editor.documentHelper.render as any).selectionCanvasIn = TestHelper.pageSelectionCanvas;
//         editor.appendTo('#container');
//     });
//     afterAll((done) => {
//         editor.destroy();
//         document.body.removeChild(document.getElementById('container'));
//         editor = undefined;
//         setTimeout(function () {
//             done();
//         }, 1000);
//     });
//     it('load document  with line spacing exactly', () => {
//         editor.editor.insertTable(2, 2);
//         editor.editorModule.insertText('Adventre', false);
//         editor.editorModule.onEnter();
//         editor.editor.insertTable(2, 2);
//         let event: any;

//         event = { keyCode: 35, preventDefault: function () { }, ctrlKey: false, shiftKey: true, which: 0 };
//         editor.documentHelper.onKeyDownInternal(event);
//         event = { keyCode: 39, preventDefault: function () { }, ctrlKey: false, shiftKey: true, which: 0 };
//         editor.documentHelper.onKeyDownInternal(event);
//         event = { keyCode: 39, preventDefault: function () { }, ctrlKey: false, shiftKey: true, which: 0 };
//         editor.documentHelper.onKeyDownInternal(event);
//         event = { keyCode: 39, preventDefault: function () { }, ctrlKey: false, shiftKey: true, which: 0 };
//         editor.documentHelper.onKeyDownInternal(event);
//         event = { keyCode: 39, preventDefault: function () { }, ctrlKey: false, shiftKey: true, which: 0 };
//         editor.documentHelper.onKeyDownInternal(event);
//         event = { keyCode: 39, preventDefault: function () { }, ctrlKey: false, shiftKey: true, which: 0 };
//         editor.documentHelper.onKeyDownInternal(event);
//         event = { keyCode: 39, preventDefault: function () { }, ctrlKey: false, shiftKey: true, which: 0 };
//         editor.documentHelper.onKeyDownInternal(event);
//     });
// });
